1. User Authentication with Token Management:
**** How would you handle user authentication in a React application, including login, storing tokens, and protecting routes? Describe your approach.

2. Implementing a Drag-and-Drop Interface
**** How would you implement a drag-and-drop interface in a React application for rearranging items in a list? 
Describe the steps and tools you would use.

______________________________________________________________________________________________________________
3. Dynamic Theme Switching
**** How would you implement a feature that allows users to switch between light and dark themes in a React application? 
Describe how you would manage theme state and apply styles.
Ans: Create a ThemeContext and provider and wrap App component with it. 
     const ThemeContext = createContext();
     const ThemeProvider = <ThemeContext.Provider value={{ theme, toggleTheme }}>{children}</ThemeContext.Provider>
     <ThemeProvider> <App /> </ThemeProvider>

     There are different ways to apply dark/light mode styles.

     Approach 1: Using CSS class
     1. Create dark-theme.css and light-theme.css
     2. Assign class to <body> whenever theme value is updated.
     const [theme, setTheme] = useState(() => {
        const savedTheme = localStorage.getItem('theme');
        return savedTheme ? savedTheme : 'light';
     });
     /* When theme is changed, assign class to body */
     useEffect(() => {
        document.body.className = theme;
        localStorage.setItem('theme', theme);
     }, [theme]);

     Approach 2: Using CSS modules
     1. Create light.module.css, dark.module.css files
     2. Based on theme, load the respective file class
      import lightStyles from './lightTheme.module.css';
      import darkStyles from './darkTheme.module.css';
      // .. other code
      const { theme } = useTheme();
      const styles = theme === 'light' ? lightStyles : darkStyles;  

      <div className={styles.container}>

     NOTE: To get OS theme, use window.matchMedia('(prefers-color-scheme: dark)').matches
     const getPreferredScheme = () => window?.matchMedia?.('(prefers-color-scheme:dark)')?.matches ? 'dark' : 'light';

     Ref: https://www.linkedin.com/pulse/building-theme-switcher-react-styled-components-alex-lomia
_____________________________________________________________________________________________________

4. Handling File Uploads
**** How would you implement a file upload feature in a React application? 
Including selecting a file, uploading it to the server, and displaying the upload progress?
Ans: Axios provides "onUploadProgress" and "onDownloadProgress" options
const config = {
    headers: {'content-type': 'multipart/form-data',
    onUploadProgress: function (event) {
        setProgress(Math.round(event.loaded / event.total * 100));
    },
    onDownloadProgress: function (event) {
        // Do whatever you want with the native progress event
    },
}
axios.post(url, formData, config).then(...).catch(...);
__________________________________________________________________________________________

5. Real-Time Data with Polling
**** How would you implement real-time data updates in a React application using polling?
Explain how you would manage the polling interval and update the state with new data.
Ans: Polling can be done in useEffect by calling a function within setInterval. 
     Call clearInterval during clean up.
     A better approach to polling is web sockets eg. Socket.io.

