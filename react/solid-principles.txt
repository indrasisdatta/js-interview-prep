SOLID principles in React JS:

1. Single Responsibility: instead of having 1 large component, create separate components for different features.
   Eg. Products listing -> Search, Grid, Main (to include both)
   <ProductSearch />
   <ProductGrid />
   
2. Open closed: classes should be open for extension but closed for modification. 
   Eg. Button component - should have the ability to add icons etc using children.
   <Button> <i class="fa fa-lock"> Disable </Button>
    
3. Liskcov's substitution: objects of superclass should be replaceable with objects of subclass.
   Eg. Form component with different input fields textarea, input, checkbox. 
   Each field component should implement the same contract value and onChange.
   
4. Interface segregation: should not be forced to depend on interface methods that are not used. Break into multiple interfaces instead.
   Eg. create separate components specific to functionality.   

5. Dependency inversion: higher level modules should not depend on lower level modules, both should depend on abstractions. 
   Classes depends on interfaces or abstract classes rather than concrete implementations. 
   Eg. Instead of directly writing fetch/axios API logic in componen, create separate Service class or function.
   
   
