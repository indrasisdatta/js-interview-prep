React 19 latest features
https://react.dev/blog/2024/12/05/react-19

1. Support for async functions in transitions to handle pending states, errors, forms and optimistic updates 
   const [isPending, startTransition] = useTransition();
   /* Handles pending state */
   startTransition(async() => {
      const response = await getData();
      return response.data;
   })

2. New hook useActionState()

3. New hook useFormStatus() - reads status of the parent form 
   const { pending } = useFormStatus();
   <button disabled={pending} >Submit</button>

4. New hook useOptimistic() - immediately render optimisticName while the async request is in progress.
   When update finishes or errors, React automatically switches to the currentName value.
   const [ optimisticName, setOptimisticName ] = useOptimistic(currentName)

5. New API use() - reada promise with use and React will suspend until the promise resolves 

6. Improvements 
   - ref as a prop instead of forwardRef 
   - cleanup function from ref callbacks 
   - Support for document metadata 
   - Support for stylesheet precedence 
   

====================================================================================================

1. React advanced hooks 
   a) useDeferredValue  https://react.dev/reference/react/useDeferredValue
   b) useTransition https://blog.webdevsimplified.com/2022-04/use-transition
      -> useDeferredValue is suited for optimizing rendering (show old content while fresh content is loading)
      -> useTransition gives lower priority to state updates written within startTransition to prevent blocking
   c) useId (Assign unique id to div etc when component is called multiple times)
   d) useImperativeHandle (Expose only few methods/custom methods from child component's forwardRef)
   e) useInsertionEffect (fired synchronously before DOM mutations eg. runtime injection of style tag)
   f) useLayoutEffect (fired synchronously after DOM mutation)
   g) useEffect (runs asynchronously once browser paints DOM changes to screen)

   Other hooks
    useState v/s useReducer - useReducer is better choice when multiple vars need to be managed 
    eg. {loading: false, data:[], eror: null } instead of 3 useState
    useContext - used as consumer to read value of Context
    useRef (v/s useState) - doesn't rerender component

2. forwardRef with useImperativeHandle (Create ref in parent and send to child component i.e access child's ref from parent)
   https://codesandbox.io/p/sandbox/forwardref-rmzmz6

3. React memo - Re-render child component only if props have changed.
   memo(Component, arePropsEqual)  --> arePropsEqual internally uses Object.is to compare old and new props
   It compares the current props with the next props using Object.is for primitive values and a shallow equality check for objects. 
   // For comparing object props, create a custom equality function
   const arePropsEqual = (prevProps, nextProps) => {
      return JSON.stringify(prevProps) === JSON.stringify(nextProps);
   };
   memo(Component, arePropsEqual);
   https://codesandbox.io/p/sandbox/memo-eg-qmchpg
   https://codesandbox.io/p/sandbox/react-memo-object-props-iimgcg

4. useMemo & useCallback 
   - useMemo - cache function result for dependencies. Function will be called only when there's a change in dependency value
   - useCallback - caches function itself when passed as prop to child 
   Note: In below example, useMemo and useCallback solves the same purpose. 
   const clickHandlerChildMemo = useMemo(() => {
      return clickHandlerChild();
   }, [childName]);
   const clickHandlerChildCallback = useCallback(
     () => clickHandlerChild,
     [childName],
   );
   https://codesandbox.io/p/sandbox/react-memo-hooks-m8p9hr
   
5. What is React Fiber?
   https://sunnychopper.medium.com/what-is-react-fiber-and-how-it-helps-you-build-a-high-performing-react-applications-57bceb706ff3
   Fiber is the new Reconcialiation algorithm in React.
   (Work - any computations that must be performed. It's usually the result of an update eg. setState)
   - pause work and come back to it later
   - assign pririoty to different types of work
   - reuse previously completed work
   - abort work if it's no longer needed
   https://github.com/acdlite/react-fiber-architecture
   https://flexiple.com/react/react-fiber

6. React authentication and authorization 
   https://dev.to/miracool/how-to-manage-user-authentication-with-react-js-3ic5
   - ProtectedRoute - mention nested routes
   - useAuth - custom hook which returns Provider with object values and reusable functions
   // Route 
   <Route element={<ProtectedRoute />}>
     <Route path="/dashboard" element={<Dashboard />} />
     <Route path="/profile" element={<Profile />} />
   </Route>
   // ProtectedRoute component - redirect to /login if token is not found
   export const ProtectedRoute = () => {
      const { token } = useAuth();
      if (token) return <Navigate to="/login">;
      return <Outlet />;
   }

7. Why does useEffect not support direct async callback function?
Ans: It expects its return function to either return a cleanup function or nothing at all. 
If we declare callback function as async, it implicitly returns a Promise, which React doesn't recognize as a clean up function. This can cause issue as React expects cleanup function to be a function and not a Promise. 

8. Disadvantage of using state in Context?
Ans: If there are multiple nested components within parent Context.Provider, state update would cause re-render to all components that are consuming this Context. So it's a good practice to wrap the Context close to the component we want to re-render.  Only components that call useContext re-render whenever the contextâ€™s state changes. 
Solution: Use Multiple Contexts, and keep state close to its Dependent Components




   
   
   
